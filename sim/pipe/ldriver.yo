                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
                            | #Loop header
0x032: 6300                 |   xorq %rax,%rax    # count = 0;
0x034: 6222                 |   andq %rdx, %rdx	#  check whether the lengh is greatere than 0
0x036: 71db01000000000000   |   jle Done
0x03f: c0f2fcffffffffffffff |   iaddq $-4, %rdx       # len = len - 4 
0x049: 721d01000000000000   |   jl Tail
                            | 
0x052:                      | Loop:  
                            | 
0x052: 50a70000000000000000 |   mrmovq (%rdi), %r10   # read val from src
0x05c: 50170800000000000000 |   mrmovq 8(%rdi), %rcx  # read val from src +4
0x066: 40a60000000000000000 |   rmmovq %r10, (%rsi)   # store src[0] to dest[0]
0x070: 62aa                 |   andq %r10, %r10       # src[0] > 0 
0x072: 718500000000000000   |   jle Npos1              # yes ? goto Npos1:
0x07b: c0f00100000000000000 |   iaddq $1, %rax        # count++
                            | 
0x085:                      | Npos1:
0x085: 40160800000000000000 |   rmmovq %rcx, 8(%rsi)  # store src[1] in dest[1]
0x08f: 6211                 |   andq %rcx, %rcx       # src[1] > 0 
0x091: 71a400000000000000   |   jle Npos2              # No ? get the next element
0x09a: c0f00100000000000000 |   iaddq $1, %rax        # count++
                            |   
0x0a4:                      | Npos2:
0x0a4: 50a71000000000000000 |   mrmovq 16(%rdi), %r10    # read val from src +8
0x0ae: 50171800000000000000 |   mrmovq 24(%rdi), %rcx   # read val from src +12
0x0b8: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)    # store src[2] in dest[2]
0x0c2: 62aa                 |   andq %r10, %r10         # src[2] > 0 
0x0c4: 71d700000000000000   |   jle Npos3                # No ? get the next element
0x0cd: c0f00100000000000000 |   iaddq $1, %rax          # count++
                            |   
0x0d7:                      | Npos3:
0x0d7: 40161800000000000000 |   rmmovq %rcx, 24(%rsi)   # store src[3] in dest[3]
0x0e1: 6211                 |   andq %rcx, %rcx         # src[3] > 0 
0x0e3: 71f600000000000000   |   jle Next                # No ? get the next element
0x0ec: c0f00100000000000000 |   iaddq $1, %rax          # count++
                            | 
0x0f6:                      | Next: 
0x0f6: c0f72000000000000000 |   iaddq $32 , %rdi      # goto next four Npositions of src
0x100: c0f62000000000000000 |   iaddq $32 , %rsi      # goto next four Npositions of dest
0x10a: c0f2fcffffffffffffff |   iaddq $-4, %rdx       # len = len - 4
0x114: 755200000000000000   |   jge Loop              # if four left, do again
                            | 
0x11d:                      | Tail:
0x11d: c0f20400000000000000 |   iaddq $4, %rdx        # get actual len  
                            |   
0x127:                      | FinalRound1:
0x127: c0f2ffffffffffffffff |   iaddq $-1 , %rdx
0x131: 72db01000000000000   |   jl Done                # Done
0x13a: 50a70000000000000000 |   mrmovq (%rdi), %r10    # Take care of FinalRounds here
0x144: 50170800000000000000 |   mrmovq 8(%rdi), %rcx
0x14e: 40a60000000000000000 |   rmmovq %r10, (%rsi)
0x158: 62aa                 |   andq %r10, %r10
0x15a: 716d01000000000000   |   jle FinalRound2
0x163: c0f00100000000000000 |   iaddq $1, %rax
                            |   
0x16d:                      | FinalRound2:
0x16d: c0f2ffffffffffffffff |   iaddq $-1 , %rdx
0x177: 72db01000000000000   |   jl Done  
0x180: 40160800000000000000 |   rmmovq %rcx, 8(%rsi)
0x18a: 6211                 |   andq %rcx, %rcx
0x18c: 719f01000000000000   |   jle FinalRound3
0x195: c0f00100000000000000 |   iaddq $1, %rax
                            | 
0x19f:                      | FinalRound3:
0x19f: c0f2ffffffffffffffff |   iaddq $-1 , %rdx
0x1a9: 72db01000000000000   |   jl Done
0x1b2: 50a71000000000000000 |   mrmovq 16(%rdi), %r10
0x1bc: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)
0x1c6: 62aa                 |   andq %r10, %r10
0x1c8: 71db01000000000000   |   jle Done
0x1d1: c0f00100000000000000 |   iaddq $1, %rax  
                            | ################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1db:                      | Done:
0x1db: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1dc:                      | End:
                            | #/* $end ncopy-ys */
0x1dc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e0:                      | 	.align 8
0x1e0:                      | src:
0x1e0: 0100000000000000     | 	.quad 1
0x1e8: 0200000000000000     | 	.quad 2
0x1f0: 0300000000000000     | 	.quad 3
0x1f8: fcffffffffffffff     | 	.quad -4
0x200: 0500000000000000     | 	.quad 5
0x208: faffffffffffffff     | 	.quad -6
0x210: 0700000000000000     | 	.quad 7
0x218: 0800000000000000     | 	.quad 8
0x220: 0900000000000000     | 	.quad 9
0x228: f6ffffffffffffff     | 	.quad -10
0x230: f5ffffffffffffff     | 	.quad -11
0x238: f4ffffffffffffff     | 	.quad -12
0x240: 0d00000000000000     | 	.quad 13
0x248: 0e00000000000000     | 	.quad 14
0x250: f1ffffffffffffff     | 	.quad -15
0x258: f0ffffffffffffff     | 	.quad -16
0x260: efffffffffffffff     | 	.quad -17
0x268: 1200000000000000     | 	.quad 18
0x270: 1300000000000000     | 	.quad 19
0x278: 1400000000000000     | 	.quad 20
0x280: 1500000000000000     | 	.quad 21
0x288: eaffffffffffffff     | 	.quad -22
0x290: e9ffffffffffffff     | 	.quad -23
0x298: 1800000000000000     | 	.quad 24
0x2a0: e7ffffffffffffff     | 	.quad -25
0x2a8: e6ffffffffffffff     | 	.quad -26
0x2b0: 1b00000000000000     | 	.quad 27
0x2b8: 1c00000000000000     | 	.quad 28
0x2c0: e3ffffffffffffff     | 	.quad -29
0x2c8: 1e00000000000000     | 	.quad 30
0x2d0: 1f00000000000000     | 	.quad 31
0x2d8: e0ffffffffffffff     | 	.quad -32
0x2e0: dfffffffffffffff     | 	.quad -33
0x2e8: 2200000000000000     | 	.quad 34
0x2f0: 2300000000000000     | 	.quad 35
0x2f8: dcffffffffffffff     | 	.quad -36
0x300: dbffffffffffffff     | 	.quad -37
0x308: 2600000000000000     | 	.quad 38
0x310: 2700000000000000     | 	.quad 39
0x318: d8ffffffffffffff     | 	.quad -40
0x320: d7ffffffffffffff     | 	.quad -41
0x328: d6ffffffffffffff     | 	.quad -42
0x330: 2b00000000000000     | 	.quad 43
0x338: 2c00000000000000     | 	.quad 44
0x340: d3ffffffffffffff     | 	.quad -45
0x348: 2e00000000000000     | 	.quad 46
0x350: 2f00000000000000     | 	.quad 47
0x358: 3000000000000000     | 	.quad 48
0x360: 3100000000000000     | 	.quad 49
0x368: 3200000000000000     | 	.quad 50
0x370: cdffffffffffffff     | 	.quad -51
0x378: ccffffffffffffff     | 	.quad -52
0x380: cbffffffffffffff     | 	.quad -53
0x388: caffffffffffffff     | 	.quad -54
0x390: c9ffffffffffffff     | 	.quad -55
0x398: c8ffffffffffffff     | 	.quad -56
0x3a0: 3900000000000000     | 	.quad 57
0x3a8: 3a00000000000000     | 	.quad 58
0x3b0: c5ffffffffffffff     | 	.quad -59
0x3b8: c4ffffffffffffff     | 	.quad -60
0x3c0: c3ffffffffffffff     | 	.quad -61
0x3c8: c2ffffffffffffff     | 	.quad -62
0x3d0: c1ffffffffffffff     | 	.quad -63
0x3d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0:                      | Postdest:
0x5e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5e8:                      | .align 8
                            | # Run time stack
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
                            | 
0x668:                      | Stack:
