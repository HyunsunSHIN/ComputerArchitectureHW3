#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

#Loop header
  xorq %rax,%rax    # count = 0;
  andq %rdx, %rdx	#  check whether the lengh is greatere than 0
  jle Done
  iaddq $-4, %rdx       # len = len - 4 
  jl Tail

Loop:  

  mrmovq (%rdi), %r10   # read val from src
  mrmovq 8(%rdi), %rcx  # read val from src +4
  rmmovq %r10, (%rsi)   # store src[0] to dest[0]
  andq %r10, %r10       # src[0] > 0 
  jle Npos1              # yes ? goto Npos1:
  iaddq $1, %rax        # count++

Npos1:
  rmmovq %rcx, 8(%rsi)  # store src[1] in dest[1]
  andq %rcx, %rcx       # src[1] > 0 
  jle Npos2              # No ? get the next element
  iaddq $1, %rax        # count++
  
Npos2:
  mrmovq 16(%rdi), %r10    # read val from src +8
  mrmovq 24(%rdi), %rcx   # read val from src +12
  rmmovq %r10, 16(%rsi)    # store src[2] in dest[2]
  andq %r10, %r10         # src[2] > 0 
  jle Npos3                # No ? get the next element
  iaddq $1, %rax          # count++
  
Npos3:
  rmmovq %rcx, 24(%rsi)   # store src[3] in dest[3]
  andq %rcx, %rcx         # src[3] > 0 
  jle Next                # No ? get the next element
  iaddq $1, %rax          # count++

Next: 
  iaddq $32 , %rdi      # goto next four Npositions of src
  iaddq $32 , %rsi      # goto next four Npositions of dest
  iaddq $-4, %rdx       # len = len - 4
  jge Loop              # if four left, do again

Tail:
  iaddq $4, %rdx        # get actual len  
  
FinalRound1:
  iaddq $-1 , %rdx
  jl Done                # Done
  mrmovq (%rdi), %r10    # Take care of FinalRounds here
  mrmovq 8(%rdi), %rcx
  rmmovq %r10, (%rsi)
  andq %r10, %r10
  jle FinalRound2
  iaddq $1, %rax
  
FinalRound2:
  iaddq $-1 , %rdx
  jl Done  
  rmmovq %rcx, 8(%rsi)
  andq %rcx, %rcx
  jle FinalRound3
  iaddq $1, %rax

FinalRound3:
  iaddq $-1 , %rdx
  jl Done
  mrmovq 16(%rdi), %r10
  rmmovq %r10, 16(%rsi)
  andq %r10, %r10
  jle Done
  iaddq $1, %rax  
################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad -4
	.quad 5
	.quad -6
	.quad 7
	.quad 8
	.quad 9
	.quad -10
	.quad -11
	.quad -12
	.quad 13
	.quad 14
	.quad -15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad 20
	.quad 21
	.quad -22
	.quad -23
	.quad 24
	.quad -25
	.quad -26
	.quad 27
	.quad 28
	.quad -29
	.quad 30
	.quad 31
	.quad -32
	.quad -33
	.quad 34
	.quad 35
	.quad -36
	.quad -37
	.quad 38
	.quad 39
	.quad -40
	.quad -41
	.quad -42
	.quad 43
	.quad 44
	.quad -45
	.quad 46
	.quad 47
	.quad 48
	.quad 49
	.quad 50
	.quad -51
	.quad -52
	.quad -53
	.quad -54
	.quad -55
	.quad -56
	.quad 57
	.quad 58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
