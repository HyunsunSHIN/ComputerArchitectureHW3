#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-4,%rdx
	jl LeftOver	

Loop:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 4(%rdi), %r11	# save second int argument in temp register
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos1
	iaddq $1, %rax		# count++
Npos1:
	rmmovq %r11, 4(%rsi)
	andq %r11,%r11
	jle Npos2
	iaddq $1, %rax

Npos2:
	mrmovq 8(%rdi), %r10
	mrmovq 12(%rdi), %r11	#save fourth int argument in temp register
	rmmovq %r10,8(%rsi) 	#...and store it to dest
	andq %r10, %r10
	jle Npos3
	iaddq $1, %rax
Npos3:
	rmmovq %r11, 12(%rsi)
	andq %r11,%r11
	jle unroll4_finished
	iaddq $1, %rax

unroll4_finished:
	iaddq $16, %rdi
	iaddq $16, %rsi
	iaddq $-4, %rdx
	jge Loop

LeftOver:
	iaddq $4, %rdx # recovering the original length

FinalRound1:
	iaddq $-1, %rdx
	jl Done
	mrmovq (%rdi), %r10
	mrmovq 4(%rdi), %r11
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle FinalRound2
	iaddq $1, %rax
FinalRound2:
	iaddq $-1,%rdx
	jl Done
	rmmovq %r11, 4(%rsi)
	andq %r11,%r11
	jle FinalRound3
	iaddq $1, %rax
FinalRound3:
	iaddq $-1, %rdx
	jl Done
	mrmovq 8(%rdi), %r11
	rmmovq %r11, 8(%rsi)
	andq %r11,%r11
	jle Done
	iaddq $1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
